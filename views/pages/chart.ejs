<!DOCTYPE html>
<html lang="en">
<%- include('../partials/head') %>
<body>
  <div class="container" style="width: 800px">
    <canvas id="myChart"></canvas>
  </div>

  <%- include('../partials/scripts') %>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2/dist/Chart.min.js"></script>
  <script>
  const id = '<%= id %>'
  
  const ctx = document.getElementById('myChart').getContext('2d')

  colors = [
    'rgb(75, 192, 192)',
    'rgb(255, 99, 132)',
    'rgb(153, 102, 255)',
    'rgb(255, 159, 64)',
    'rgb(255, 205, 86)',
    'rgb(54, 162, 235)',
    'rgb(201, 203, 207)'
  ]

  const config = {
    type: 'line',
    data: {
      labels: [],
      datasets: []
    },
    options: {
      scales: {
        yAxes: [{
          ticks: {
            beginAtZero: true
          }
        }]
      },
      aspectRatio: 1.75,
      responsive: true
    }
  }

  const myChart = new Chart(ctx, config)

  let datasets = []

  function getHistory() {
    return fetch(`http://localhost:3000/api/history/${id}`).then(resp => {
      return resp.json()
    })
  }

  function createDatasetArray(keys) {
    return keys.map((key, i) => {
      return {
        label: key,
        data: [],
        borderColor: colors[i],
        backgroundColor: colors[i],
        fill: false,
        lineTension: 0
      }
    })
  }

  function updateGraph() {
    getHistory().then(res => {
      if (datasets.length == 0) {
        if (res.length > 0) {
          const keys = Object.keys(res[0].metrics)
          datasets = createDatasetArray(keys)
        } else {
          return
        }
      }

      // { metric1: [ ... ], metric2: [ ... ], ... }
      const metricsObj = res.reduce((acc, curr) => {
        Object.keys(curr.metrics).forEach(metric => {
          if (metric in acc) {
            acc[metric].push(curr.metrics[metric])
          } else {
            acc[metric] = [curr.metrics[metric]]
          }
        })
        return acc
      }, {})

      const labels = res.map(r => {
        return r.epoch
      })

      datasets.forEach(dataset => {
        if (dataset.label in metricsObj) {
          dataset.data = metricsObj[dataset.label]
        }
      })

      myChart.data.labels = labels
      myChart.data.datasets = datasets
      myChart.update()
    })
  }

  updateGraph()
  </script>
</body>
</html>